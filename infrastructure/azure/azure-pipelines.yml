trigger:
- master

# TODO Determine if a plan file should be used: https://www.terraform.io/docs/commands/plan.html#security-warning

variables:
  # This is required so we can pass our json variables files between stages until this is resovled:
  # https://github.com/microsoft/azure-pipelines-tasks/issues/4743
  INFRASTRUCTURE_VARIABLES: 'infrastructure-variables'
  #TODO Pass this in
  ENVIRONMENT: 'dev'

stages:
 - stage: Infrastructure
   jobs:
   - job: Infrastructure
     pool:
      vmImage: 'ubuntu-latest'

     variables:
      LOCATION: '<SET_BY_PIPELINE>'
      RESOURCE_GROUP_NAME: '<SET_BY_PIPELINE>'
      STORAGE_ACCOUNT_NAME: '<SET_BY_PIPELINE>'
      STORAGE_ACCOUNT_SKU: '<SET_BY_PIPELINE>'
      STORAGE_CONTAINER_URL: '<SET_BY_PIPELINE>'
      TERRAFORM_BACKEND_STATE_CONTAINER_NAME: '<SET_BY_PIPELINE>'
      TERRAFORM_STATE_FILENAME: '<SET_BY_PIPELINE>'

     steps:
      - task: Bash@3
        displayName: 'Initialize Infrastructure Stage Variables'
        inputs:
          targetType: filePath
          filePath: 'infrastructure/azure/scripts/sh/add_env_variables'
          arguments: 'immutable/global.tfvars.json env/$(ENVIRONMENT).tfvars.json'
          workingDirectory: 'infrastructure/azure'
          failOnStderr: true

      - task: AzureCLI@1
        displayName: 'Azure CLI to bootstrap required Azure resources'
        inputs:
          azureSubscription: '$(SERVICE_CONNECTION_NAME)'
          scriptPath: 'infrastructure/azure/scripts/sh/bootstrap_azure_terraform'

      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        displayName: 'Install Terraform 0.12.23'
        inputs:
          terraformVersion: 0.12.23
      
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        displayName: 'Terraform : init'
        inputs:
          workingDirectory: 'infrastructure/azure/immutable'
          backendServiceArm: '$(SERVICE_CONNECTION_NAME)'
          backendAzureRmResourceGroupName: '$(RESOURCE_GROUP_NAME)'
          backendAzureRmStorageAccountName: '$(STORAGE_ACCOUNT_NAME)'
          backendAzureRmContainerName: '$(TERRAFORM_BACKEND_STATE_CONTAINER_NAME)'
          backendAzureRmKey: '$(TERRAFORM_STATE_FILENAME)'
      
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        displayName: 'Terraform : plan'
        inputs:
          command: plan
          workingDirectory: 'infrastructure/azure/immutable'
          commandOptions: '-var-file=./global.tfvars.json -var-file=../env/$(ENVIRONMENT).tfvars.json'
          environmentServiceNameAzureRM: '$(SERVICE_CONNECTION_NAME)'

      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        name: TerraformDeployment
        displayName: 'Terraform : apply -auto-approve'
        inputs:
          command: apply
          workingDirectory: 'infrastructure/azure/immutable'
          commandOptions: '-auto-approve -var-file=./global.tfvars.json -var-file=../env/$(ENVIRONMENT).tfvars.json'
          environmentServiceNameAzureRM: '$(SERVICE_CONNECTION_NAME)'

      - task: Bash@3
        displayName: 'Set Output Variables'
        inputs:
          targetType: 'inline'
          script: |
            mv $(TerraformDeployment.jsonOutputVariablesPath) $(INFRASTRUCTURE_VARIABLES).json

      - task: PublishBuildArtifacts@1
        displayName: 'Upload Output Variables'
        inputs:
          PathtoPublish: '$(INFRASTRUCTURE_VARIABLES).json'
          ArtifactName: '$(INFRASTRUCTURE_VARIABLES)'
          publishLocation: 'Container'

 - stage: Build
   jobs:
   - job: Build
     pool:
      vmImage: 'ubuntu-latest'
     
     variables:
       WEBAPP_NAME: '<SET_BY_PIPELINE>'

     steps:
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Build Stage Variables'
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: '$(INFRASTRUCTURE_VARIABLES)'
          downloadPath: '$(System.DefaultWorkingDirectory)'

      - task: Bash@3
        displayName: 'Initialize Build Stage Variables'
        inputs:
          targetType: 'inline'
          script: |
            WEBAPP_NAME=$(cat infrastructure-variables/infrastructure-variables.json | jq ''.webapp_name.value'' -r)
            echo "##vso[task.setvariable variable=WEBAPP_NAME]${WEBAPP_NAME}"

      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs:
          command: restore
          projects: '**/*.csproj'

      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          projects: '**/*.csproj'
          arguments: '--configuration $(BuildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: Test
        inputs:
          command: test
          projects: '**/*[Tt]ests/*.csproj'
          arguments: '--configuration $(BuildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: Publish
        inputs:
          command: publish
          publishWebProjects: True
          arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: True

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact'
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: '$(WEBAPP_NAME)'

 - stage: Deploy
   jobs:
   - job: Deploy
     pool:
      vmImage: 'ubuntu-latest'
    
     variables:
       WEBAPP_NAME: '<SET_BY_PIPELINE>'

     steps:
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Deploy Stage Variables'
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: '$(INFRASTRUCTURE_VARIABLES)'
          downloadPath: '$(System.DefaultWorkingDirectory)'

      - task: Bash@3
        displayName: 'Initialize Deploy Stage Variables'
        inputs:
          targetType: 'inline'
          script: |
            WEBAPP_NAME=$(cat infrastructure-variables/infrastructure-variables.json | jq ''.webapp_name.value'' -r)
            echo "##vso[task.setvariable variable=WEBAPP_NAME]${WEBAPP_NAME}"

      - task: DownloadBuildArtifacts@0
        displayName: 'Download Deployment Package'
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: '$(WEBAPP_NAME)'
          downloadPath: '$(System.ArtifactsDirectory)'

      - task: AzureRmWebAppDeployment@4
        inputs:
          ConnectionType: 'AzureRM'
          azureSubscription: '$(SERVICE_CONNECTION_NAME)'
          appType: 'webApp'
          WebAppName: '$(WEBAPP_NAME)'
          packageForLinux: '$(System.ArtifactsDirectory)/**/*.zip'