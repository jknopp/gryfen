trigger:
- master

stages:
 - stage: Infrastructure
   jobs:
   - job: Infrastructure
     pool:
      vmImage: 'ubuntu-latest'

     variables:
      SERVICE_CONNECTION_NAME: '<SET_BY_USER_VARIABLE>'
      LOCATION: '<SET_BY_PIPELINE>'
      RESOURCE_GROUP_NAME: '<SET_BY_PIPELINE>'
      STORAGE_ACCOUNT_NAME: '<SET_BY_PIPELINE>'
      STORAGE_ACCOUNT_SKU: '<SET_BY_PIPELINE>'
      STORAGE_CONTAINER_URL: '<SET_BY_PIPELINE>'
      TERRAFORM_BACKEND_STATE_CONTAINER_NAME: '<SET_BY_PIPELINE>'
      TERRAFORM_STATE_FILENAME: '<SET_BY_PIPELINE>'
      WEBAPP_NAME: '<SET_BY_PIPELINE>'

     steps:
      - task: Bash@3
        displayName: 'Initialize Variables'
        inputs:
          targetType: filePath
          filePath: 'infrastructure/azure/scripts/sh/add_env_variables'
          arguments: 'immutable/global.tfvars.json env/dev.tfvars.json'
          workingDirectory: 'infrastructure/azure'
          failOnStderr: true

      - task: AzureCLI@1
        displayName: 'Azure CLI to bootstrap required Azure resources'
        inputs:
          azureSubscription: '$(SERVICE_CONNECTION_NAME)'
          scriptPath: 'infrastructure/azure/scripts/sh/bootstrap_azure_terraform'

      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        displayName: 'Install Terraform 0.12.23'
        inputs:
          terraformVersion: 0.12.23
      
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        displayName: 'Terraform : init'
        inputs:
          workingDirectory: 'infrastructure/azure/immutable'
          backendServiceArm: '$(SERVICE_CONNECTION_NAME)'
          backendAzureRmResourceGroupName: '$(RESOURCE_GROUP_NAME)'
          backendAzureRmStorageAccountName: '$(STORAGE_ACCOUNT_NAME)'
          backendAzureRmContainerName: '$(TERRAFORM_BACKEND_STATE_CONTAINER_NAME)'
          backendAzureRmKey: '$(TERRAFORM_STATE_FILENAME)'

      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        displayName: 'Terraform : plan'
        inputs:
          command: plan
          workingDirectory: 'infrastructure/azure/immutable'
          commandOptions: '-var-file=./global.tfvars.json -var-file=../env/dev.tfvars.json'
          environmentServiceNameAzureRM: '$(SERVICE_CONNECTION_NAME)'

      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        name: TerraformDeployment
        displayName: 'Terraform : apply -auto-approve'
        inputs:
          command: apply
          workingDirectory: 'infrastructure/azure/immutable'
          commandOptions: '-auto-approve -var-file=./global.tfvars.json -var-file=../env/dev.tfvars.json'
          environmentServiceNameAzureRM: '$(SERVICE_CONNECTION_NAME)'

      - task: Bash@3
        displayName: 'Set Output Variables'
        inputs:
          targetType: 'inline'
          script: |
            WEBAPP_NAME=$(cat $(TerraformDeployment.jsonOutputVariablesPath) | jq ''.webapp_name.value'' -r)
            echo "##vso[task.setvariable variable=WEBAPP_NAME]${WEBAPP_NAME}"

 - stage: Build
   jobs:
   - job: Build
     pool:
      vmImage: 'ubuntu-latest'

     steps:
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact'
        inputs:
          PathtoPublish: '$(build.artifactstagingdirectory)'

 - stage: Deploy
   jobs:
   - job: Deploy
     pool:
      vmImage: 'ubuntu-latest'

     steps:
      - task: AzureRmWebAppDeployment@4
        inputs:
          ConnectionType: 'AzureRM'
          azureSubscription: '$(SERVICE_CONNECTION_NAME)'
          appType: 'webApp'
          WebAppName: '$(WEBAPP_NAME)'
          packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'